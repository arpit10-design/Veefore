# ============================================================
# 🔧 REPLIT AI AGENT PROMPT — FINAL YELLOW CONTAMINATION FIX (ALL DEVICES)
# ============================================================

## Background
The app recently migrated from a “space dark” theme to a new “light professional” theme.  
After redesign, unwanted **yellow tints** appear across **all devices and browsers**, including mobile and desktop.  
All known causes (autofill, tap highlight, design tokens, browser cache) have been ruled out. A full CSS architecture rewrite was done, but yellow styles still persist.

## Goal
Brute-force detect and remove any remaining **CSS, JS, inline style, third-party injection, or runtime** reference to yellow colour, including legacy theme tokens, JavaScript-injected styles, or framework hardcoded logic.

---

## Step-by-step Instructions:

### 1. Deep Search (Full Cross-Platform Audit)
Recursively search the entire project using:

```bash
rg -i --pretty "(yellow|#ffff00|#ff0|rgb\(255, ?255, ?0\)|borderColor.*yellow|outline.*yellow|--.*yellow|warning|tap-highlight|autofill|focus|currentColor|classList.add\(.*yellow|style.*border.*yellow)" -g '*.{css,scss,less,js,jsx,ts,tsx,vue,html}'
```

Save matches to `reports/yellow-deep-matches.md` with file, line, and preview.

### 2. Reset Theme System (Full Token Purge)
- If a `theme.ts`, `tailwind.config.js`, `tokens/`, Chakra or Bootstrap theme file exists:
  - Replace **all yellow/warning tokens** with neutral or brand accent (e.g., `#1e88e5`, `gray.500`, `var(--accent)`).

### 3. Global CSS Kill Patch
Inject the following rules into `reset.css` or `global.css`:

```css
* {
  -webkit-tap-highlight-color: transparent !important;
}
input:-webkit-autofill {
  box-shadow: 0 0 0 1000px white inset !important;
  -webkit-box-shadow: 0 0 0 1000px white inset !important;
}
*:not(svg *) {
  border-color: transparent !important;
  outline-color: transparent !important;
}
svg * {
  fill: currentColor !important;
}
```

### 4. JS Runtime Style Audit
Scan all JS and TS files for inline style or class injections:

```ts
style.borderColor = "yellow";
style.outline = "2px solid yellow";
classList.add("border-yellow-500", "text-warning", "outline-yellow");
dangerouslySetInnerHTML with inline styles
```

Rewrite them to use theme-safe tokens or `var(--accent)`.

### 5. Remove Legacy and Unused Files
Delete all dark-theme, space-theme, or old framework config files:

```bash
theme/dark.css
themes/space.css
dark.module.css
old-theme/
dist/theme-dark.js
```

### 6. Visual Snapshot Regression Test
- Run Playwright or Puppeteer tests on:
  - Android Chrome
  - iOS Safari
  - Desktop Chrome & Firefox
- Take before/after screenshots of components previously affected.
- Flag any yellow pixel diff > 0.1%.

### 7. Create PR and Deliverables
- New branch: `fix/yellow-phantom`
- Include:
  - `yellow-deep-matches.md`
  - theme updates
  - patched CSS/JS
  - visual diff snapshots
- Tag reviewer `@frontend-lead` with summary of root cause and fixes.

---

## Exit Criteria
- No `yellow`, `warning`, `tap-highlight`, or autofill styles in any source file
- No yellow rendering in mobile or desktop
- Tests green on Playwright/CI
- Clean Lighthouse accessibility pass

# ============================================================
# END OF PROMPT
# ============================================================
