# ============================================================
# ðŸŽ¨ REPLIT AI AGENT PROMPT â€” YELLOW-FREE APP REDESIGN (SAFE MIGRATION)
# ============================================================

## Goal
Redesign the app UI using a clean, professional light theme with:
- No yellow or warning colors
- Reuse of business logic, routing, and state management
- Replacement of legacy components and styles
- Fully responsive and accessible UI with modern design

---

## Strategy
1. **Preserve logic** â€” Keep all API calls, state stores, and core page logic.
2. **Rebuild UI layer** â€” Redesign all UI from scratch using clean tokens.
3. **Kill all legacy themes** â€” Drop space/dark/yellow themes completely.

---

## Stack
- Next.js + App Router (if existing)
- Tailwind CSS + ShadCN UI (recommended)
- TypeScript support

---

## Steps

### 1. Setup Clean UI Framework
If not already done:
```bash
npx create-next-app@latest redesigned-app --tailwind --typescript --src-dir
cd redesigned-app
npx shadcn-ui@latest init
```

### 2. Create Theme Tokens (No Yellow)
In `tailwind.config.ts`:
```ts
extend: {
  colors: {
    accent: '#1e88e5',
    neutral: '#f1f5f9',
    danger: '#ef4444',
    success: '#22c55e',
  },
},
```
Do not define `yellow`, `warning`, `amber`, or similar.

### 3. Rebuild All UI Components
- Design components using ShadCN primitives (e.g., `<Button>`, `<Card>`, etc.)
- Replace all old class-based yellow styles with token-based styling (e.g., `text-accent`)
- Use Tailwind for layout, spacing, and responsiveness

### 4. Global Style Reset
In `global.css` or `reset.css`:
```css
* {
  -webkit-tap-highlight-color: transparent;
}
input:-webkit-autofill {
  box-shadow: 0 0 0 1000px white inset;
}
*:not(svg *) {
  border-color: transparent;
  outline-color: transparent;
}
svg * {
  fill: currentColor;
}
```

### 5. Reconnect Business Logic
- Reconnect data fetching, auth, hooks, and state from old app
- Use new components to render outputs from the same logic

### 6. Manual Inspection and QA
- Test on Chrome, Firefox, Safari (mobile and desktop)
- Use DevTools to confirm no `yellow`, `warning`, or `#facc15` colors exist
- Use Lighthouse for accessibility and contrast checks

---

## Optional Enhancements
- Add dark mode toggle with neutral palette
- Add `eslint` rule to block `yellow`, `warning` class usage
- Set up snapshot visual regression tests to confirm cleanliness

---

## Exit Criteria
- App UI is fully redesigned using clean light theme
- No yellow color or contamination visible anywhere
- All logic reused from old app
- No legacy style files or dark themes included

# ============================================================
# END OF PROMPT
# ============================================================
